import { useState, useEffect } from "react";
import PropTypes from "prop-types";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Label } from "@/components/ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Textarea } from "@/components/ui/textarea";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Checkbox } from "@/components/ui/checkbox";
import {
  AlertTriangle,
  Info,
  Pill,
  FileText,
  Shield,
  Activity,
  Save,
  X,
  Copy,
  CheckCircle
} from "lucide-react";
import {
  medicationCategories,
  routes,
  pregnancyCategories,
  sideEffects,
  monitoringTypes
} from "@/data/medications";

export default function AddNewMedication({ onSave, onCancel, existingMedications = [] }: any) {
  const [formData, setFormData] = useState({
    name: "",
    category: "",
    dosage: "",
    frequency: "",
    indication: "",
    route: "oral",
    sideEffects: [],
    interactions: "",
    contraindications: "",
    monitoring: "",
    pregnancyCategory: "",
    generic: true,
    brandNames: "",
    ndc: "",
    description: "",
    warnings: "",
    storage: "",
    halfLife: "",
    onset: "",
    duration: "",
    peakEffect: "",
    metabolism: "",
    excretion: "",
    cost: "",
    availability: "available"
  });

  const [errors, setErrors] = useState({});
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [searchTerm, setSearchTerm] = useState("");
  const [selectedSideEffects, setSelectedSideEffects] = useState([]);
  const [selectedMonitoring, setSelectedMonitoring] = useState([]);
  const [duplicateCheck, setDuplicateCheck] = useState(null);
  const [submitStatus, setSubmitStatus] = useState(null); // 'success', 'error', null

  // Check for duplicates
  useEffect(() => {
    if (formData.name.length > 2) {
      const duplicate = existingMedications.find(med =>
        med.name.toLowerCase() === formData.name.toLowerCase()
      );
      setDuplicateCheck(duplicate);
    } else {
      setDuplicateCheck(null);
    }
  }, [formData.name, existingMedications]);

  const validateForm = () => {
    const newErrors = {};

    if (!formData.name.trim()) {
      newErrors.name = "Medication name is required";
    }

    if (!formData.category) {
      newErrors.category = "Category is required";
    }

    if (!formData.dosage.trim()) {
      newErrors.dosage = "Dosage is required";
    }

    if (!formData.frequency.trim()) {
      newErrors.frequency = "Frequency is required";
    }

    if (!formData.indication.trim()) {
      newErrors.indication = "Indication is required";
    }

    if (!formData.route) {
      newErrors.route = "Route is required";
    }

    if (duplicateCheck) {
      newErrors.name = "Medication already exists in database";
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    if (!validateForm()) {
      setSubmitStatus('error');
      return;
    }

    setIsSubmitting(true);
    setSubmitStatus(null);

    try {
      const medicationData = {
        ...formData,
        sideEffects: selectedSideEffects,
        monitoring: selectedMonitoring,
        id: Date.now(), // In real app, this would be generated by backend
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString(),
        createdBy: "current_user", // In real app, this would be the actual user
        status: "active"
      };

      await onSave(medicationData);
      setSubmitStatus('success');

      // Show success message briefly before closing
      setTimeout(() => {
        setSubmitStatus(null);
      }, 2000);

    } catch (error) {
      console.error("Error saving medication:", error);
      setSubmitStatus('error');
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleSideEffectToggle = (sideEffect: any) => {
    setSelectedSideEffects(prev =>
      prev.includes(sideEffect)
        ? prev.filter(se => se !== sideEffect)
        : [...prev, sideEffect]
    );
  };

  const handleMonitoringToggle = (monitoring: any) => {
    setSelectedMonitoring(prev =>
      prev.includes(monitoring)
        ? prev.filter(m => m !== monitoring)
        : [...prev, monitoring]
    );
  };

  const loadFromTemplate = (template: any) => {
    setFormData({
      ...formData,
      name: template.name,
      category: template.category,
      dosage: template.dosage,
      frequency: template.frequency,
      indication: template.indication,
      route: template.route,
      sideEffects: template.sideEffects || [],
      interactions: template.interactions || "",
      contraindications: template.contraindications || "",
      monitoring: template.monitoring || "",
      pregnancyCategory: template.pregnancyCategory || "",
      generic: template.generic !== undefined ? template.generic : true,
      brandNames: template.brandNames || "",
      ndc: template.ndc || ""
    });
    setSelectedSideEffects(template.sideEffects || []);
    setSelectedMonitoring(template.monitoring ? [template.monitoring] : []);
  };

  const filteredSideEffects = sideEffects.filter(se =>
    se.toLowerCase().includes(searchTerm.toLowerCase())
  );

  const filteredMonitoring = monitoringTypes.filter(mt =>
    mt.toLowerCase().includes(searchTerm.toLowerCase())
  );

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex justify-between items-center">
        <div>
          <h2 className="text-2xl font-bold text-gray-900">Add New Medication</h2>
          <p className="text-gray-600">Add a new medication to the system database</p>
        </div>
        <div className="flex gap-2">
          <Button variant="outline" onClick={onCancel}>
            <X className="w-4 h-4 mr-2" />
            Cancel
          </Button>
        </div>
      </div>

      {/* Status Messages */}
      {submitStatus === 'success' && (
        <Alert variant="default" className="border-green-200 bg-green-50">
          <CheckCircle className="h-4 w-4 text-green-600" />
          <AlertDescription className="text-green-800">
            <p className="font-semibold">Medication Added Successfully!</p>
            <p className="text-sm">The new medication has been added to the database.</p>
          </AlertDescription>
        </Alert>
      )}

      {submitStatus === 'error' && (
        <Alert variant="destructive">
          <AlertTriangle className="h-4 w-4" />
          <AlertDescription>
            <p className="font-semibold">Error Adding Medication</p>
            <p className="text-sm">Please check the form for errors and try again.</p>
          </AlertDescription>
        </Alert>
      )}

      {/* Duplicate Warning */}
      {duplicateCheck && (
        <Alert variant="destructive">
          <AlertTriangle className="h-4 w-4" />
          <AlertDescription>
            <div className="flex justify-between items-center">
              <div>
                <p className="font-semibold">Duplicate Medication Found</p>
                <p className="text-sm">A medication with this name already exists in the database.</p>
              </div>
              <Button
                size="sm"
                variant="outline"
                onClick={() => loadFromTemplate(duplicateCheck)}
              >
                <Copy className="w-4 h-4 mr-1" />
                Use Existing
              </Button>
            </div>
          </AlertDescription>
        </Alert>
      )}

      <form onSubmit={handleSubmit} className="space-y-6">
        <Tabs defaultValue="basic" className="w-full">
          <TabsList className="grid w-full grid-cols-5">
            <TabsTrigger value="basic">Basic Info</TabsTrigger>
            <TabsTrigger value="clinical">Clinical</TabsTrigger>
            <TabsTrigger value="pharmacology">Pharmacology</TabsTrigger>
            <TabsTrigger value="monitoring">Monitoring</TabsTrigger>
            <TabsTrigger value="additional">Additional</TabsTrigger>
          </TabsList>

          {/* Basic Information Tab */}
          <TabsContent value="basic" className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Pill className="w-5 h-5" />
                  Basic Medication Information
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div className="space-y-2">
                    <Label>{"Medication Name *"}</Label>
                    <Input
                      value={formData.name}
                      onChange={e => setFormData({ ...formData, name: e.target.value })}
                      placeholder="e.g., Amoxicillin"
                      className={errors.name ? "border-red-500" : ""}
                    />
                    {errors.name && <p className="text-sm text-red-500">{errors.name}</p>}
                  </div>

                  <div className="space-y-2">
                    <Label>{"Category *"}</Label>
                    <Select value={formData.category} onValueChange={v => setFormData({ ...formData, category: v })}>
                      <SelectTrigger className={errors.category ? "border-red-500" : ""}>
                        <SelectValue placeholder="Select category" />
                      </SelectTrigger>
                      <SelectContent>
                        {medicationCategories.map(category => (
                          <SelectItem key={category} value={category}>
                            {category}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                    {errors.category && <p className="text-sm text-red-500">{errors.category}</p>}
                  </div>
                </div>

                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div className="space-y-2">
                    <Label>{"Dosage *"}</Label>
                    <Input
                      value={formData.dosage}
                      onChange={e => setFormData({ ...formData, dosage: e.target.value })}
                      placeholder="e.g., 250mg, 500mg"
                      className={errors.dosage ? "border-red-500" : ""}
                    />
                    {errors.dosage && <p className="text-sm text-red-500">{errors.dosage}</p>}
                  </div>

                  <div className="space-y-2">
                    <Label>{"Frequency *"}</Label>
                    <Input
                      value={formData.frequency}
                      onChange={e => setFormData({ ...formData, frequency: e.target.value })}
                      placeholder="e.g., Twice daily"
                      className={errors.frequency ? "border-red-500" : ""}
                    />
                    {errors.frequency && <p className="text-sm text-red-500">{errors.frequency}</p>}
                  </div>
                </div>

                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div className="space-y-2">
                    <Label>{"Indication *"}</Label>
                    <Input
                      value={formData.indication}
                      onChange={e => setFormData({ ...formData, indication: e.target.value })}
                      placeholder="e.g., Bacterial infections"
                      className={errors.indication ? "border-red-500" : ""}
                    />
                    {errors.indication && <p className="text-sm text-red-500">{errors.indication}</p>}
                  </div>

                  <div className="space-y-2">
                    <Label>{"Route *"}</Label>
                    <Select value={formData.route} onValueChange={v => setFormData({ ...formData, route: v })}>
                      <SelectTrigger className={errors.route ? "border-red-500" : ""}>
                        <SelectValue placeholder="Select route" />
                      </SelectTrigger>
                      <SelectContent>
                        {routes.map(route => (
                          <SelectItem key={route} value={route.toLowerCase()}>
                            {route}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                    {errors.route && <p className="text-sm text-red-500">{errors.route}</p>}
                  </div>
                </div>

                <div className="space-y-2">
                  <Label>{"Description"}</Label>
                  <Textarea
                    value={formData.description}
                    onChange={e => setFormData({ ...formData, description: e.target.value })}
                    placeholder="Brief description of the medication..."
                    rows={3}
                  />
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          {/* Clinical Information Tab */}
          <TabsContent value="clinical" className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Shield className="w-5 h-5" />
                  Clinical Information
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="space-y-2">
                  <Label>{"Side Effects"}</Label>
                  <div className="space-y-2">
                    <Input
                      placeholder="Search side effects..."
                      value={searchTerm}
                      onChange={e => setSearchTerm(e.target.value)}
                      className="mb-3"
                    />
                    <div className="grid grid-cols-2 md:grid-cols-3 gap-2 max-h-48 overflow-y-auto border rounded-md p-3">
                      {filteredSideEffects.map(sideEffect => (
                        <div key={sideEffect} className="flex items-center space-x-2">
                          <Checkbox
                            id={sideEffect}
                            checked={selectedSideEffects.includes(sideEffect)}
                            onCheckedChange={() => handleSideEffectToggle(sideEffect)}
                          />
                          <Label htmlFor={sideEffect} className="text-sm">
                            {sideEffect}
                          </Label>
                        </div>
                      ))}
                    </div>
                    {selectedSideEffects.length > 0 && (
                      <div className="flex flex-wrap gap-1 mt-2">
                        {selectedSideEffects.map(sideEffect => (
                          <Badge key={sideEffect} variant="secondary" className="text-xs">
                            {sideEffect}
                            <button
                              type="button"
                              onClick={() => handleSideEffectToggle(sideEffect)}
                              className="ml-1 hover:text-red-500"
                              aria-label={`Remove ${sideEffect} side effect`}
                            >
                              <X className="w-3 h-3" />
                            </button>
                          </Badge>
                        ))}
                      </div>
                    )}
                  </div>
                </div>

                <div className="space-y-2">
                  <Label>{"Drug Interactions"}</Label>
                  <Textarea
                    value={formData.interactions}
                    onChange={e => setFormData({ ...formData, interactions: e.target.value })}
                    placeholder="List known drug interactions..."
                    rows={3}
                  />
                </div>

                <div className="space-y-2">
                  <Label>{"Contraindications"}</Label>
                  <Textarea
                    value={formData.contraindications}
                    onChange={e => setFormData({ ...formData, contraindications: e.target.value })}
                    placeholder="List contraindications..."
                    rows={3}
                  />
                </div>

                <div className="space-y-2">
                  <Label>{"Warnings"}</Label>
                  <Textarea
                    value={formData.warnings}
                    onChange={e => setFormData({ ...formData, warnings: e.target.value })}
                    placeholder="Important warnings and precautions..."
                    rows={3}
                  />
                </div>

                <div className="space-y-2">
                  <Label>{"Pregnancy Category"}</Label>
                  <Select value={formData.pregnancyCategory} onValueChange={v => setFormData({ ...formData, pregnancyCategory: v })}>
                    <SelectTrigger>
                      <SelectValue placeholder="Select pregnancy category" />
                    </SelectTrigger>
                    <SelectContent>
                      {pregnancyCategories.map(category => (
                        <SelectItem key={category.value} value={category.value}>
                          {category.label}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          {/* Pharmacology Tab */}
          <TabsContent value="pharmacology" className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Activity className="w-5 h-5" />
                  Pharmacological Properties
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div className="space-y-2">
                    <Label>{Half - Life}</Label>
                    <Input
                      value={formData.halfLife}
                      onChange={e => setFormData({ ...formData, halfLife: e.target.value })}
                      placeholder="e.g., 1-2 hours"
                    />
                  </div>

                  <div className="space-y-2">
                    <Label>{"Onset of Action"}</Label>
                    <Input
                      value={formData.onset}
                      onChange={e => setFormData({ ...formData, onset: e.target.value })}
                      placeholder="e.g., 30-60 minutes"
                    />
                  </div>
                </div>

                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div className="space-y-2">
                    <Label>{"Duration of Action"}</Label>
                    <Input
                      value={formData.duration}
                      onChange={e => setFormData({ ...formData, duration: e.target.value })}
                      placeholder="e.g., 6-8 hours"
                    />
                  </div>

                  <div className="space-y-2">
                    <Label>{"Peak Effect"}</Label>
                    <Input
                      value={formData.peakEffect}
                      onChange={e => setFormData({ ...formData, peakEffect: e.target.value })}
                      placeholder="e.g., 1-2 hours"
                    />
                  </div>
                </div>

                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div className="space-y-2">
                    <Label>{"Metabolism"}</Label>
                    <Input
                      value={formData.metabolism}
                      onChange={e => setFormData({ ...formData, metabolism: e.target.value })}
                      placeholder="e.g., Hepatic"
                    />
                  </div>

                  <div className="space-y-2">
                    <Label>{"Excretion"}</Label>
                    <Input
                      value={formData.excretion}
                      onChange={e => setFormData({ ...formData, excretion: e.target.value })}
                      placeholder="e.g., Renal"
                    />
                  </div>
                </div>

                <div className="space-y-2">
                  <Label>{"Storage Requirements"}</Label>
                  <Input
                    value={formData.storage}
                    onChange={e => setFormData({ ...formData, storage: e.target.value })}
                    placeholder="e.g., Room temperature, protect from light"
                  />
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          {/* Monitoring Tab */}
          <TabsContent value="monitoring" className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <FileText className="w-5 h-5" />
                  Monitoring Requirements
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="space-y-2">
                  <Label>{"Required Monitoring"}</Label>
                  <div className="space-y-2">
                    <Input
                      placeholder="Search monitoring types..."
                      value={searchTerm}
                      onChange={e => setSearchTerm(e.target.value)}
                      className="mb-3"
                    />
                    <div className="grid grid-cols-2 md:grid-cols-3 gap-2 max-h-48 overflow-y-auto border rounded-md p-3">
                      {filteredMonitoring.map(monitoring => (
                        <div key={monitoring} className="flex items-center space-x-2">
                          <Checkbox
                            id={monitoring}
                            checked={selectedMonitoring.includes(monitoring)}
                            onCheckedChange={() => handleMonitoringToggle(monitoring)}
                          />
                          <Label htmlFor={monitoring} className="text-sm">
                            {monitoring}
                          </Label>
                        </div>
                      ))}
                    </div>
                    {selectedMonitoring.length > 0 && (
                      <div className="flex flex-wrap gap-1 mt-2">
                        {selectedMonitoring.map(monitoring => (
                          <Badge key={monitoring} variant="secondary" className="text-xs">
                            {monitoring}
                            <button
                              type="button"
                              onClick={() => handleMonitoringToggle(monitoring)}
                              className="ml-1 hover:text-red-500"
                              aria-label={`Remove ${monitoring} monitoring`}
                            >
                              <X className="w-3 h-3" />
                            </button>
                          </Badge>
                        ))}
                      </div>
                    )}
                  </div>
                </div>

                <div className="space-y-2">
                  <Label>{"Monitoring Notes"}</Label>
                  <Textarea
                    value={formData.monitoring}
                    onChange={e => setFormData({ ...formData, monitoring: e.target.value })}
                    placeholder="Additional monitoring notes..."
                    rows={3}
                  />
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          {/* Additional Information Tab */}
          <TabsContent value="additional" className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Info className="w-5 h-5" />
                  Additional Information
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div className="space-y-2">
                    <Label>{"Brand Names"}</Label>
                    <Input
                      value={formData.brandNames}
                      onChange={e => setFormData({ ...formData, brandNames: e.target.value })}
                      placeholder="e.g., Amoxil, Trimox"
                    />
                  </div>

                  <div className="space-y-2">
                    <Label>{"NDC Number"}</Label>
                    <Input
                      value={formData.ndc}
                      onChange={e => setFormData({ ...formData, ndc: e.target.value })}
                      placeholder="e.g., 12345-123-45"
                    />
                  </div>
                </div>

                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div className="space-y-2">
                    <Label>{"Cost (per unit)"}</Label>
                    <Input
                      value={formData.cost}
                      onChange={e => setFormData({ ...formData, cost: e.target.value })}
                      placeholder="e.g., $0.50"
                    />
                  </div>

                  <div className="space-y-2">
                    <Label>{"Availability"}</Label>
                    <Select value={formData.availability} onValueChange={v => setFormData({ ...formData, availability: v })}>
                      <SelectTrigger>
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="available">Available</SelectItem>
                        <SelectItem value="limited">Limited</SelectItem>
                        <SelectItem value="discontinued">Discontinued</SelectItem>
                        <SelectItem value="backorder">Backorder</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                </div>

                <div className="flex items-center space-x-2">
                  <Checkbox
                    id="generic"
                    checked={formData.generic}
                    onCheckedChange={checked => setFormData({ ...formData, generic: checked })}
                  />
                  <Label htmlFor="generic">Generic medication available</Label>
                </div>
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>

        {/* Form Actions */}
        <div className="flex justify-end gap-3 pt-6 border-t">
          <Button type="button" variant="outline" onClick={onCancel}>
            Cancel
          </Button>
          <Button type="submit" disabled={isSubmitting}>
            {isSubmitting ? (
              <>
                <Activity className="w-4 h-4 mr-2 animate-spin" />
                Saving...
              </>
            ) : (
              <>
                <Save className="w-4 h-4 mr-2" />
                Save Medication
              </>
            )}
          </Button>
        </div>
      </form>
    </div>
  );
}

AddNewMedication.propTypes = {
  onSave: PropTypes.func.isRequired,
  onCancel: PropTypes.func.isRequired,
  existingMedications: PropTypes.array
};
